!<arch>
0-isupper.c/    1631886554  0     0     100666  326       `
#include "main.h"
#include <stdio.h>

/**
*_isupper - Function that checks for uppercase character
*@c: Number tu be checked
*Return: 1 if c is uppercase and 0 otherwise
*/

int _isupper(int c)
{

	int m;

	if (c >= 'A' && c <= 'Z')

	{

		m = 1;

	}

	else

	{

		m = 0;

	}

	return (m);

}
0-memset.c/     1631886656  0     0     100666  364       `
#include "main.h"

/**
 * _memset - function to fill the memory with a constant
 * @s: the memory section
 * @b: The constant to replace
 * @n: the bytes to change
 * Return: The memory section given
 */

char *_memset(char *s, char b, unsigned int n)

{

	unsigned int i;

	for (i = 0 ; i < n ; i++)
	{

		s[i] = b;

	}

	return (s);

}
0-strcat.c/     1631886745  0     0     100666  432       `
#include "main.h"
#include <stdio.h>
/**
 * _strcat - Function that concatenates two strings
 * @dest: First string to be concatenated
 * @src: Second string to be concatenated
 * Return: Pointer to the resulting
 */
char *_strcat(char *dest, char *src)
{
	char *a  = dest;

	while (*dest != '\0')
	{
		dest++;
	}
	while (*src != '\0')
	{
		*dest = *src;
		dest++;
		src++;
	}
	*dest = '\0';
	return (a);
}
1-isdigit.c/    1631886859  0     0     100666  292       `
#include "main.h"
#include <stdio.h>

/**
* _isdigit - Function that checks for a digit character
* @c: Number to be checked
* Return: 1 if c is a digit and 0 otherwise
*/
int _isdigit(int c)
{

	if (c >= '0' && c <= '9')
	{
		return (1);
	}
	else
	{
		return (0);
	}

}
1-memcpy.c/     1631886933  0     0     100666  358       `
#include "main.h"

/**
 * _memcpy - Function that copies memory area
 * @dest: Copy pointer
 * @src: Pointer to be copied
 * @n: Number of bytes
 * Return: Copy pointer
 */

char *_memcpy(char *dest, char *src, unsigned int n)
{

	unsigned int i = 0;

	for (i = 0 ; i < n ; i++)
	{
		(*(dest + i)) = (*(src + i));
	}
	return (dest);

}
1-strncat.c/    1631887003  0     0     100666  383       `
#include "main.h"
#include <stdio.h>
/**
 * *_strncat - check the code for Holberton School students.
 *@dest:destino
 *@src:source
 *@n:integer
 * Return: Always 0.
 */
char *_strncat(char *dest, char *src, int n)
{
	char *a = dest;

	while (*dest)
	{
		dest++;
	}
	while (n-- && src)
	{
		*dest = *src;
		dest++;
		src++;
	}
	*dest = '\0';
	return (a);
}

100-atoi.c/     1631888050  0     0     100666  441       `
#include "main.h"

/**
 * _atoi - Function that convert a string to an integer
 * @s: String to be converted an integer
 * Return: Integer value
 */


int _atoi(char *s)

{
	int x = 0, i = 0, minus = -1;

	while (s[i] != '\0' && (s[i] < '0' || s[i] > '9'))
	{
		if (s[i] == '-')
			minus *= -1;
		i++;
	}
	while (s[i] != '\0' && (s[i] >= '0' && s[i] <= '9'))
		x = (x * 10) - (s[i++] - '0');

	return (x * minus);
}

2-strchr.c/     1631887087  0     0     100666  353       `
#include "main.h"

/**
 * _strchr - Function that locates a character in a string
 * @s: String to be tested
 * @c: Occurrence of the character
 * Return: Occurrence
 */

char *_strchr(char *s, char c)

{
	for ( ; ; s++)
	{

		if (*s == c)
		{
			return (s);
		}
		if (*s == '\0')
		{
			return ('\0');
		}

	}
	return (s);
}

2-strlen.c/     1631887176  0     0     100666  260       `
#include "main.h"

/**
 * _strlen - Function that returns the length of a string
 * @s: String to be check
 * Return: Length of a string
 */

int _strlen(char *s)

{
	int len = 0;

	while (*s != '\0')
	{
		s++;
		len++;
	}
	return (len);
}
2-strncpy.c/    1631887254  0     0     100666  367       `
#include "main.h"
/**
 * *_strncpy - check the code for Holberton School students.
 *@dest:destino
 *@src:source
 *@n:integer
 * Return: Always 0.
 */

char *_strncpy(char *dest, char *src, int n)
{
	int a = 0;

	while (a < n && src[a] != '\0')
	{
		dest[a] = src[a];
		a++;
	}
	while (a < n)
	{
		dest[a] = '\0';
		a++;
	}
	return (dest);
}

3-islower.c/    1631887340  0     0     100666  299       `
#include "main.h"
/**
 * _islower - Function that checks for lowercase
 *
 * @c: The number to be checked
 *
 * Return: 1 if c is lowercase and 0 otherwise
 */

int _islower(int c)
{

	int m;

	if (c >= 'a' && c <= 'z')
	{
		m = 1;
	}
	else
	{
		m = 0;
	}

	return (m);

}

3-puts.c/       1631887431  0     0     100666  306       `
#include "main.h"

/**
 * _puts - writes a string to stdout up, not including the null character
 * @str: This is the C string to be written
 * Return: Always 0.
 */

void _puts(char *str)
{
	while (*str != '\0')
	{
		int a;

		a = *str;

		_putchar(a);
		str++;
	}
	_putchar('\n');
}
3-strcmp.c/     1631887495  0     0     100666  308       `
#include "main.h"

/**
 * _strcmp - check the code for Holberton School students.
 *@s1:destino
 *@s2:source
 * Return: Always 0.
 */

int _strcmp(char *s1, char *s2)
{

	while (*s1 && *s2 && *s1 == *s2)

	{
		++s1;
		++s2;
	}

	return ((unsigned char)(*s1) - (unsigned char)(*s2));

}
3-strspn.c/     1631887603  0     0     100666  637       `
#include "main.h"

/**
 * _strspn - Function that gets the length of a prefix substring
 * @s: String to be scanned
 * @accept: String containing the characters to match
 * Return: Number of occurrences
 */

unsigned int _strspn(char *s, char *accept)

{
	unsigned int i, j, k, brk = 0, count = 0;

	for (k = 0; accept[k] != '\0'; k++)
		;

	for (i = 0; s[i] != '\0'; i++)
	{
		if (brk == 1)
			break;

		for (j = 0; j < k; j++)
		{
			if (s[i] == accept[j])
			{
				count++;
				break;
			}

			if (s[i] != accept[k - 1] && j == k - 1)
			{
				brk++;
				break;
			}
		}
	}

	return (count);
}

4-isalpha.c/    1631887676  0     0     100666  359       `
#include "main.h"

/**
 * _isalpha - Function that checks for alphabetic character
 *
 * @c: The number to be checked
 *
 * Return: 1 if c is a letter, lowercase or uppercase and 0 otherwise
 */
int _isalpha(int c)
{

	int m;

	if ((c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z'))
	{
		m = 1;
	}
	else
	{
		m = 0;
	}

	return (m);
}

4-strpbrk.c/    1631887753  0     0     100666  358       `
#include "main.h"
/**
 * _strpbrk - check the code for Holberton School students.
 *@s:character
 *@accept:character
 * Return: Always 0.
 */
char *_strpbrk(char *s, char *accept)
{
	int i, j;

	for (i = 0; s[i]; i++)
	{
		for (j = 0; accept[j]; j++)
		{
			if (accept[j] == s[i])
			{
				return (s + i);
			}
		}

	}
	return (0);
}
5-strstr.c/     1631887829  0     0     100666  489       `
#include "main.h"
/**
 * _strstr - check the code for Holberton School students.
 *@haystack:do something
 *@needle:do something more
 * Return: Always 0.
 */
char *_strstr(char *haystack, char *needle)
{
	while (*haystack)
	{
		char *Begin = haystack;
		char *pattern = needle;

		while (*haystack && *pattern && *haystack == *pattern)
		{
			haystack++;
			pattern++;
		}

		if (!*pattern)
		{
			return (Begin);
		}
		haystack = Begin + 1;
	}
	return (0);
}

6-abs.c/        1631887897  0     0     100666  260       `
#include "main.h"

/**
 * _abs - Function that computes the absolute value of an integer
 *
 * @n: The number to be checked
 *
 * Return: absolute value
 */
int _abs(int m)

{
	if (m < 0)
	{
		m *= -1;
	}
	else
	{
		;
	}

	return (m);
}
9-strcpy.c/     1631887975  0     0     100666  374       `
#include "main.h"

/**
 * _strcpy - Function that copies a string
 * @dest: copy string
 * @src: string to be copied
 * Return: value the pointer
 */

char *_strcpy(char *dest, char *src)
{
	int i, c = 0;

	while (1)
	{
		if (src[c] == '\0')
			break;

		c++;
	}

	for (i = 0; i < c; i++)
		dest[i] = src[i];

	dest[i] = '\0';

	return (dest);
}
_putchar.c/     1631888128  0     0     100666  279       `
#include <unistd.h>
#include "main.h"

/**
 * _putchar - writes the character c to stdout
 * @c: The character to print
 *
 * Return: On success 1.
 * On error, -1 is returned, and errno is set appropriately.
 */
int _putchar(char c)
{
	return (write(1, &c, 1));
}
